#!/usr/bin/env node

const fs = require("fs");
const { compile } = require("json-schema-to-typescript");
const { pascalize } = require("humps");
const { join } = require("path");

const baseDir = process.cwd() + "/ipc_manifests";
const files = fs.readdirSync(process.cwd() + "/ipc_manifests");

files.forEach(async file => {
  const json = await fs.readFileSync(join(baseDir, file), "utf8");
  const data = JSON.parse(json);
  const tsd = await typeDefFromMeta(data);
  console.log(tsd);
});

function typeDefFromMeta(meta) {
  return Promise.all(
    (meta.schemas || []).map(s => compile(s, s.title, { bannerComment: "" }))
  ).then(types => {
    const service = `
/** ${meta.help} */
export interface ${pascalize(meta.serviceName)} {
${meta.interfaces.map(i => {
      console.log(i);
      return `
  /** ${i.help} */
  ${i.methodName}(${listParams(i)}): ${returnType(i)}
`;
    })}
}
`;
    const typedef = [`namespace loke.rpc {`, ...types, service, "}"];
    return typedef.join("\n");
  });
}

function listParams(interface) {
  if (interface.params) {
    return interface.params
      .map(p => `${p.name}: ${p.type || "any"}`)
      .join(", ");
  }

  return interface.paramNames.map(p => `${p}: any`).join(", ");
}

function returnType(interface) {
  return `Promise<${interface.returnType || "any"}>`;
}
